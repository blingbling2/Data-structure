#define queuesize 10
typedef struct
{
	int data[queuesize];
	int front;
	int rear;
}SeQueue;

int InitQueue(SeQueue *Q)/*初始化队列*/ 
{
	Q->front = 0;
	Q->rear  = 0;
	return 1;
}
int QueueLength(SeQueue Q)/*返回当前队列长度*/
{
	return (Q.rear - Q.front + queuesize) % queuesize;
} 
int EnQueue(SeQueue *Q,int e)/*新元素进入队列*/ 
{
	if (( Q->rear + 1) % queuesize == Q->front)/*队列满*/ 
		return 0;
	Q->data[Q->rear] = e;
	Q->rear = (Q->rear+1)%queuesize;
	
	return 1;
}
int DeQueue(SeQueue *Q,int *e)/*出队列*/ 
{
	if(Q->front == Q->rear)	/*队列为空*/
		return 0;
	*e = Q->data[Q->front];
	Q->front = (Q->front+1)%queuesize;
	
	return 1; 
}




 typedef struct QNode/*结点结构*/ 
 {
 	int data;
 	struct QNode *next;
 }QNode,*QueuePtr;
 
 typedef struct/*队列的链表结构*/ 
 {
 	QueuePtr front,rear;
 }LinkQueue;
 
 int EnQueue(LinkQueue *Q,int e)/*入队列*/ 
 {
 	QueuePtr s = (QueuePtr)malloc(sizeof(QNode));
 	if (!s) /*存储分配失败*/
		exit(OVERFLOW);
	s->data = e;
	s->next = NULL;
	Q->rear->next = s;/*新结点接入*/ 
	
	Q->rear = s;/*将新结点设置为尾结点*/ 
	return 1; 
 }
 int DeQueue(LinkQueue *Q,int *e)
 {
 	QueuePtr p;
 	if(Q->front == Q->rear)/*空队列*/ 
 		return 0;
 		
 	p = Q->front->next;
 	*e = p->data;
 	Q->front->next = p->next;
 	
 	if (Q->rear == p)/*若队头是队尾，删除后将rear指向头结点*/ 
 		Q->rear = Q->front;
 	free(p);
 	return 1;
 }
